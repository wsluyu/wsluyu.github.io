<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lu Yu</title>
  
  <subtitle>Lu Yu Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wsluyu.github.io/"/>
  <updated>2022-03-09T08:38:45.092Z</updated>
  <id>https://wsluyu.github.io/</id>
  
  <author>
    <name>Lu Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Appium使用教程基于Python</title>
    <link href="https://wsluyu.github.io/blog/2021/12/31/hexo/appium-action/"/>
    <id>https://wsluyu.github.io/blog/2021/12/31/hexo/appium-action/</id>
    <published>2021-12-31T16:00:00.000Z</published>
    <updated>2022-03-09T08:38:45.092Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/bimg/53.png" alt></p><h2 id="一、Appium简介"><a href="#一、Appium简介" class="headerlink" title="一、Appium简介"></a>一、Appium简介</h2><h3 id="1-Appium简介"><a href="#1-Appium简介" class="headerlink" title="1. Appium简介"></a>1. Appium简介</h3><p>Appium是一个开源测试自动化框架，可用于原生，混合和移动Web应用程序测试。 它使用WebDriver协议驱动iOS，Android和Windows应用程序。</p><p>Appium的优势：</p><ul><li>可以跨平台同时支持Android、iOS </li><li>支持多种语言，java、python、php、Ruby等</li></ul><h3 id="2-Appium的架构"><a href="#2-Appium的架构" class="headerlink" title="2. Appium的架构"></a>2. Appium的架构</h3><ol><li>Appium有客户端和服务器两部分组成</li><li>Appium是在手机操作系统自带的测试框架基础上实现的</li><li>Android：UIAutomator</li><li>iOS:UIAutomation</li></ol><p><strong>Appium运行原理</strong></p><p><img src="/bimg/41.png" alt></p><ol><li>我们的电脑上运行自动化测试脚本（client），调用的是 webdriver 的接口，appium server接收到我们 client 上发送过来的命令后他会将这些命令转换为 UIIautomator 认识的命令，然后由 UIautomator 来上设备上执行自动化。</li><li>Appium 的架构原理如上图所示，由客户端（Appium Client）和服务器（Appium Server）两部门组成，客户端与服务器通过 JSON Wire Protocol 进行通信。</li></ol><h2 id="二、Appium环境搭建"><a href="#二、Appium环境搭建" class="headerlink" title="二、Appium环境搭建"></a>二、Appium环境搭建</h2><p>按下面安装环境为例：</p><ul><li>操作系统：Mac</li><li>被测平台：Android模拟器或Android真机</li><li>appium服务端：appium Desktop</li><li>appium客户端：python-client</li></ul><h3 id="1-使用Android-Studio创建Andorid模拟器"><a href="#1-使用Android-Studio创建Andorid模拟器" class="headerlink" title="1.使用Android Studio创建Andorid模拟器"></a>1.使用Android Studio创建Andorid模拟器</h3><h4 id="1-Andriod-studio下载"><a href="#1-Andriod-studio下载" class="headerlink" title="(1)Andriod studio下载"></a>(1)Andriod studio下载</h4><p><a href="https://developer.android.google.cn/studio" target="_blank" rel="external">https://developer.android.google.cn/studio</a><br>据自己的操作系统下载对应版本，我用的是mac</p><h4 id="2-创建Andorid模拟器"><a href="#2-创建Andorid模拟器" class="headerlink" title="(2)创建Andorid模拟器"></a>(2)创建Andorid模拟器</h4><ol><li>首先，启动Android Studio ，创建一个项目，然后点击下面按钮，进入创建模拟器管理页面</li></ol><p><img src="/bimg/49.png" alt></p><ol start="2"><li>点击Create Virtual Device创建模拟器<br>category选择phone，然后选择一款手机型号</li></ol><p><img src="/bimg/50.png" alt></p><p>AVD Name:为模拟器起一个名字<br>Pixel 2 XL: 选择手机型号，屏幕尺寸为5.99英寸，分辨率为1440*2880（单位：像素），560dpi<br>Q:对应的Android版本10.0  x86<br>Startup orientation:选择模拟器横屏或者竖屏显示<br>Graphics:选择模拟器中的渲染图形<br>Device Frame:是否显示手机外形，可以不勾选。<br>单击Finish按钮，完成Android模拟器的创建。</p><p><img src="/bimg/51.png" alt></p><p>在Android模拟器管理列表中，选择创建的Android模拟器，在Actionsy一列中单机三角形启动按钮，启动模拟器</p><p><img src="/bimg/52.png" width="500"></p><h3 id="2-Appium-Desktop"><a href="#2-Appium-Desktop" class="headerlink" title="2.Appium Desktop"></a>2.Appium Desktop</h3><p>appium下载地址：<a href="https://github.com/appium/appium-desktop" target="_blank" rel="external">https://github.com/appium/appium-desktop</a></p><p>可以根据自己的平台下载相应的版本。下面以Mac版本为例，下载并安装完成后，appium启动界面如下：</p><p><img src="/bimg/42.png" width="400"></p><p>默认显示监控的Host和Port，点击start server按钮，启动server，监听本机的4732端口。</p><p><img src="/bimg/43.png" width="500"></p><p>启动观察器</p><h3 id="3-Python-Client"><a href="#3-Python-Client" class="headerlink" title="3.Python Client"></a>3.Python Client</h3><p>前提：系统已经安装并配置好python环境</p><p>方法1：直接用pip命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install Appium-Python-Client</span><br></pre></td></tr></table></figure><p>方法2： 官方下载 Appium-Python-Client包，命令行进入解压目录，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python setup.py install</span><br></pre></td></tr></table></figure><h3 id="4-连接Android真机"><a href="#4-连接Android真机" class="headerlink" title="4.连接Android真机"></a>4.连接Android真机</h3><p>使用数据线把手机连接到开启appium的电脑，开启usb调试功能。可使用adb命令列出设备确保连接成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb devices -l</span><br></pre></td></tr></table></figure><p>举例如下：</p><p><img src="/bimg/44.png" alt></p><p>设备名 device:star2qlteue </p><h2 id="三、Appium基础"><a href="#三、Appium基础" class="headerlink" title="三、Appium基础"></a>三、Appium基础</h2><h3 id="1-Desired-Capabilities"><a href="#1-Desired-Capabilities" class="headerlink" title="1.Desired Capabilities"></a>1.Desired Capabilities</h3><p>appium在启动session时，需要提供Desired Capabilities。Desired Capabilities本质上是字典对象，由客户端生成并发送给服务器（appium desktop）,告诉服务器APP运行的环境。</p><p>Desired Capabilities基本配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">desired_caps = &#123; </span><br><span class="line">    <span class="string">'automationName'</span>: <span class="string">'appium'</span>, </span><br><span class="line">    <span class="string">'platformName'</span>: <span class="string">'Android'</span>, </span><br><span class="line">    <span class="string">'deviceName'</span>: <span class="string">'star2qlteue'</span>, </span><br><span class="line">    <span class="string">'appPackage'</span>: <span class="string">'com.包名x.包名y'</span>, </span><br><span class="line">    <span class="string">'appActivity'</span>: <span class="string">'com.包名x.包名y.view.base.首页Activity'</span>, </span><br><span class="line">    <span class="string">'noReset'</span>: <span class="literal">False</span>  <span class="comment"># 启动APP是不是需要清除原有数据 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何获取’appPackage’和’appActivity’</p><ol><li>打开APP。</li><li>执行&gt; adb logcat&gt;./log.txt</li><li>在APP上做一些操作</li><li>Ctrl+c 结束adb命令</li><li>open log.text 打开文件，搜索：Displayed </li></ol><h3 id="2-元素定位"><a href="#2-元素定位" class="headerlink" title="2.元素定位"></a>2.元素定位</h3><p>UI自动化测试关键就是定位元素，想要对元素进行点击或输入操作，都要定位元素。<br>常用的定位方法：</p><ul><li>id定位</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(</span><br><span class="line">    AppiumBy.ID,</span><br><span class="line">    <span class="string">"com.sixdays.包名x.包名y:id/iv_close"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>Class name定位</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(AppiumBy.CLASS_NAME, <span class="string">"android.widget.Button"</span>)</span><br></pre></td></tr></table></figure><ul><li>Accessibility id定位</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(AppiumBy.ACCESSIBILITY_ID, <span class="string">"ACCESSIBILITY_ID"</span>)</span><br></pre></td></tr></table></figure><ul><li>Android uiautomtor定位</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_android_uiautomator(</span><br><span class="line">    <span class="string">'new UiSelector().text("Suggest an Edit")'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>Xpath定位</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(</span><br><span class="line">    AppiumBy.XPATH,</span><br><span class="line">    <span class="string">"//android.view.ViewGroup/android.widget.Button"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="3-appium常用API"><a href="#3-appium常用API" class="headerlink" title="3.appium常用API"></a>3.appium常用API</h3><p>appium官方文档：<a href="http://appium.io/docs/en/about-appium/intro/" target="_blank" rel="external">http://appium.io/docs/en/about-appium/intro/</a></p><p>应用操作：</p><ol><li>安装应用：install_app()</li><li>卸载应用：remove_app()</li><li>关闭应用：close_app()</li><li>启动应用：lanch_app()</li><li>将应用置于后台：background_app()</li></ol><p>键盘操作：</p><ol><li>输入字符串：send_keys()</li><li>模拟键盘：keyevent()</li></ol><p>触摸操作：</p><ol><li>点击操作：click()</li><li>长按控件：long_press()</li><li>移动：move_to()</li></ol><h2 id="四、unittest单元测试框架"><a href="#四、unittest单元测试框架" class="headerlink" title="四、unittest单元测试框架"></a>四、unittest单元测试框架</h2><h3 id="1-unittest是什么"><a href="#1-unittest是什么" class="headerlink" title="1. unittest是什么"></a>1. unittest是什么</h3><p>unittest是python内置的单元测试框架，具备编写用例、组织用例、执行用例、输出报告等自动化框架的条件。</p><h3 id="2-单元测试框架提供的功能"><a href="#2-单元测试框架提供的功能" class="headerlink" title="2. 单元测试框架提供的功能"></a>2. 单元测试框架提供的功能</h3><ol><li><p>提供用例组织与执行</p><p> 当测试用例达到成百上千条时，就产生了扩展性与维护性等问题，此时就需要考虑用例的规范与组织问题了。单元测试框架便能很好的解决这个问题</p></li><li><p>提供丰富的断言方法</p><p> 不论是功能测试还是单元测试，在用例完成之后都需要将实际结果与预期结果进行比较(断言)，从而断定用例是否执行通过。单元测试框架一般会提供丰富的断言方法。例如：相等\不相等，包含\不包含，True\False的断言方法等</p></li><li><p>提供丰富的日志</p><p> 当测试用例执行失败时能抛出清晰的失败原因，当所有用例执行完成之后能提供丰富的执行结果。例如，总执行时间、失败用例数、成功用例数等</p></li></ol><h3 id="3-重要的概念"><a href="#3-重要的概念" class="headerlink" title="3. 重要的概念"></a>3. 重要的概念</h3><ol><li><p>Test case</p><p> 一个TestCase的实例就是一个测试用例。什么是测试用例呢？就是一个完整的测试流程。包括测试前准备环境的搭建(SetUP)、实现测试过程的代码(run)，以及测试后环境的还原(tearDown)。单元测试(Unittest)的本质也就在这里，一个测试用例就是一个完整的测试单元，通过运行这个测试单元，可以对某一个功能进行验证</p></li><li><p>Test Suite</p><p> 一个功能的验证往往需要多个测试用例，可以把多个测试用例集合在一起执行，这就产生了测试套件TestSuite的概念。TestSuite用来组装单个测试用例。可以通过addTest加载TestCase到TestSuite中，从而返回一个TestSuite实例。而且TestSuite也可以嵌套TestSuite</p></li><li><p>Test Runner</p><p> 测试的执行也是单元测试中非常重要的一个概念，一般单元测试框架中都会提供丰富的执行策略和执行结果。在Unittest单元测试框架中，通过TextTestRunner类提供的run()方法来执行test suite/test case。test runner可以使用图形界面、文本界面，或返回一个特殊的值等方式来表示测试执行的结果</p></li><li><p>Test Fixture</p><p> 对一个测试用例环境的搭建和销毁，就是一个Fixture，通过覆盖TestCase的setUP()和tearDown()方法来实现。这有什么用呢？比如说在这个测试用例中需要访问数据库，那么可以在setUP()中建立数据库连接来进行初始化，在tearDown()中清除数据库产生的数据，然后关闭连接</p><p> 注：tearDown()方法的过程很重要，要为下一个TestCase留下一个干净的环境</p></li></ol><p><img src="/bimg/45.png" alt></p><h3 id="4-断言方法"><a href="#4-断言方法" class="headerlink" title="4. 断言方法"></a>4. 断言方法</h3><p>在执行测试用例的过程中，最终的测试用例执行成功与否，是通过测试得到的实际结果与预期结果进行比较得到的。unittest框架的Testcase类提供的用于测试结果的常用断言方法如下：</p><table><thead><tr><th>assertEqual(a,b)</th><th>a == b</th></tr></thead><tbody><tr><td>assertNotEqual(a,b)</td><td>a != b</td></tr><tr><td>assertTrue(x)</td><td>x is true</td></tr><tr><td>assertFalse(x)</td><td>x is false</td></tr><tr><td>assertIsNone(x)</td><td>x is none</td></tr><tr><td>assertIsNotNone(x)</td><td>x is not none</td></tr></tbody></table><h2 id="五、HTML测试报告"><a href="#五、HTML测试报告" class="headerlink" title="五、HTML测试报告"></a>五、HTML测试报告</h2><p>HTMLTestRunner是unittest的一个扩展，它可以生成易于使用的HTML测试报告。<br>下载地址：<a href="http://tungwaiyip.info/software/HTMLTestRunner.html" target="_blank" rel="external">http://tungwaiyip.info/software/HTMLTestRunner.html</a></p><p>生成HTML测试报告：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(open(<span class="string">'./test.html'</span>, <span class="string">'wb'</span>)) <span class="keyword">as</span> fp:</span><br><span class="line">    runner = HTMLTestRunner(</span><br><span class="line">        stream=fpz,</span><br><span class="line">        title=<span class="string">'&lt;project name&gt;test report'</span>,</span><br><span class="line">        description=<span class="string">'describe: TP test '</span></span><br><span class="line">    )</span><br><span class="line">    runner.run(suite)</span><br></pre></td></tr></table></figure><p>测试报告展示：</p><p><img src="/bimg/46.png" alt></p><p><img src="/bimg/47.png" alt></p><p><img src="/bimg/48.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/bimg/53.png&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、Appium简介&quot;&gt;&lt;a href=&quot;#一、Appium简介&quot; class=&quot;headerlink&quot; title=&quot;一、Appium简介&quot;&gt;&lt;/a&gt;一、Appium简介&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="appium" scheme="https://wsluyu.github.io/categories/appium/"/>
    
    
      <category term="appium" scheme="https://wsluyu.github.io/tags/appium/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter配置元件-计数器</title>
    <link href="https://wsluyu.github.io/blog/2018/10/11/hexo/jmeter_3/"/>
    <id>https://wsluyu.github.io/blog/2018/10/11/hexo/jmeter_3/</id>
    <published>2018-10-11T16:00:00.000Z</published>
    <updated>2022-03-09T08:38:45.092Z</updated>
    
    <content type="html"><![CDATA[<p>Jmeter计数器<br><a id="more"></a></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>需要引用的数据量较大，且要求不能重复或者需要自增，那么可以使用计数器来实现。<br>计数器（counter）：允许用户创建一个在线程组之内都可以被引用的计数器。<br>计数器允许用户配置一个起点,一个最大值,增量数，循环到最大值,然后重新开始,继续这样,直到测试结束。计数器使用long存储的值,所取的范围是2^63——2^63-1.</p><h3 id="1、启动jmeter，添加线程组，右键添加配置元件——计数器"><a href="#1、启动jmeter，添加线程组，右键添加配置元件——计数器" class="headerlink" title="1、启动jmeter，添加线程组，右键添加配置元件——计数器"></a>1、启动jmeter，添加线程组，右键添加配置元件——计数器</h3><p><img src="/bimg/37.jpg" alt></p><p>计数器界面如下：<br><img src="/bimg/38.jpg" alt></p><p>启动（start）：给定计数器的起始值、初始值，第一次迭代时，会把该值赋给计数器 </p><p>PS：英文版是Start，Jmeter的中文语言将Start翻译成了“启动”，有些歧义</p><p>递增(Increment)：每次迭代后，给计数器增加的值</p><p>最大值(Maximum)：计数器的最大值，如果超过最大值，重新设置为初始值(Start)，默认的最大值为Long.MAX_VALUE,2^63-1（如果持续压测，建议最好不要设置最大值）</p><p>Number format：可选格式，比如000，格式化为001，002；默认格式为Long.toString()，但是默认格式下，还是可以当作数字使用</p><p>引用名称(Reference Name)：用于控制在其它元素中引用该值，形式：$(reference_name}</p><p>与每用户独立的跟踪计数器(Track Counter Independently for each User)：全局的计数器，如果不勾选，即全局的，比如用户#1 获取值为1，用户#2获取值还是为1；</p><p>如果勾选，即独立的，则每个用户有自己的值：比如用户#1 获取值为1，用户#2获取值为2。</p><p>每次迭代复原计数器（Reset counter on each Thread Group Iteration）：可选，仅勾选与每用户独立的跟踪计数器时可用；</p><p>如果勾选，则每次线程组迭代，都会重置计数器的值，当线程组是在一个循环控制器内时比较有用。</p><h3 id="2、具体过程"><a href="#2、具体过程" class="headerlink" title="2、具体过程"></a>2、具体过程</h3><h4 id="①计数器设置"><a href="#①计数器设置" class="headerlink" title="①计数器设置"></a>①计数器设置</h4><p><img src="/bimg/39.jpg" alt></p><h4 id="②取样器设置"><a href="#②取样器设置" class="headerlink" title="②取样器设置"></a>②取样器设置</h4><p><img src="/bimg/40.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jmeter计数器&lt;br&gt;
    
    </summary>
    
      <category term="测试" scheme="https://wsluyu.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Jmeter" scheme="https://wsluyu.github.io/tags/Jmeter/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter连接数据库</title>
    <link href="https://wsluyu.github.io/blog/2018/04/15/hexo/jmeter_JDBC/"/>
    <id>https://wsluyu.github.io/blog/2018/04/15/hexo/jmeter_JDBC/</id>
    <published>2018-04-15T16:00:00.000Z</published>
    <updated>2022-03-09T08:38:45.092Z</updated>
    
    <content type="html"><![CDATA[<p>Jmeter连接数据库</p><a id="more"></a><h2 id="下载JDBC驱动"><a href="#下载JDBC驱动" class="headerlink" title="下载JDBC驱动"></a>下载JDBC驱动</h2><p>  在使用jmeter做性能或自动化测试的时候，往往需要直接对数据库施加压力，或者某些参数只能从数据库获取，这时候就必须使用jmeter连接数据库。</p><h3 id="下载对应的驱动包"><a href="#下载对应的驱动包" class="headerlink" title="下载对应的驱动包"></a>下载对应的驱动包</h3><p>mysql驱动：<br>下载链接：<a href="https://dev.mysql.com/downloads/connector/j/" target="_blank" rel="external">https://dev.mysql.com/downloads/connector/j/</a><br>（mysql-connector-java-5.1.13-bin.jar 可能现在有跟新的版本了），并放到Jmeter目录中的lib文件下，复制之后，重启jmeter。</p><p>sqlServer驱动：<br>sqljdbc4.jar，一样都需要放到Jmeter目录中的lib文件下，复制之后，重启jmeter。</p><h2 id="连接MySQL设置"><a href="#连接MySQL设置" class="headerlink" title="连接MySQL设置"></a>连接MySQL设置</h2><h3 id="1、配置驱动程序，测试计划右下角，点击浏览，选择jdbc驱动，如下图所示："><a href="#1、配置驱动程序，测试计划右下角，点击浏览，选择jdbc驱动，如下图所示：" class="headerlink" title="1、配置驱动程序，测试计划右下角，点击浏览，选择jdbc驱动，如下图所示："></a>1、配置驱动程序，测试计划右下角，点击浏览，选择jdbc驱动，如下图所示：</h3><p><img src="/bimg/25.png" alt></p><h3 id="2、添加线程组"><a href="#2、添加线程组" class="headerlink" title="2、添加线程组"></a>2、添加线程组</h3><p>打开JMeter,创建线程组。鼠标右键点击测试计划—&gt;添加—&gt;Threads—&gt;线程组。</p><h3 id="3、配置JDBC"><a href="#3、配置JDBC" class="headerlink" title="3、配置JDBC"></a>3、配置JDBC</h3><p>在线程组中，右键添加–&gt;配置元件—&gt;“JDBC Connection Configuration”，如下图所示：<br><img src="/bimg/26.png" alt></p><h3 id="4、配置JDBC-Connection-Configuration，如下图所示："><a href="#4、配置JDBC-Connection-Configuration，如下图所示：" class="headerlink" title="4、配置JDBC Connection Configuration，如下图所示："></a>4、配置JDBC Connection Configuration，如下图所示：</h3><p>1)Varible Name: 这个是变量的名字，也就是说不能重复，</p><p>2) JDBC URL: jdbc:mysql://1920168.0.1:3306/idmdb ，其中 1920168.0.1:3306：这个数据库的地址和端口号； idmdb，这个是测试的数据库名。</p><p>3) Driver Class ：org.gjt.mm.mysql.Driver  或者 com.mysql.jdbc.Driver   这是固定值</p><p>4) Username：这个数据库的登录名</p><p>5) password： 这个是数据库的登录密码<br><img src="/bimg/27.png" alt></p><h3 id="5、添加JDBC-request"><a href="#5、添加JDBC-request" class="headerlink" title="5、添加JDBC request"></a>5、添加JDBC request</h3><p>右键点击“线程组”，在下面添加一个“JDBC request”，其中variable name名称必须与jdbc配置相同，如下图所示：</p><p><img src="/bimg/28.png" alt></p><h3 id="6、执行结果，如下图所示："><a href="#6、执行结果，如下图所示：" class="headerlink" title="6、执行结果，如下图所示："></a>6、执行结果，如下图所示：</h3><p><img src="/bimg/29.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jmeter连接数据库&lt;/p&gt;
    
    </summary>
    
      <category term="Jmeter" scheme="https://wsluyu.github.io/categories/Jmeter/"/>
    
    
      <category term="Jmeter MySQL" scheme="https://wsluyu.github.io/tags/Jmeter-MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Python小程序</title>
    <link href="https://wsluyu.github.io/blog/2018/04/09/hexo/Python%20code/"/>
    <id>https://wsluyu.github.io/blog/2018/04/09/hexo/Python code/</id>
    <published>2018-04-09T16:00:00.000Z</published>
    <updated>2022-03-09T08:38:45.092Z</updated>
    
    <content type="html"><![CDATA[<p>Python小程序</p><a id="more"></a><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>下面是实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">5</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(list)):  </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(list)-i):</span><br><span class="line">        <span class="keyword">if</span> list[j]&gt;list[j+<span class="number">1</span>]:</span><br><span class="line">            temp = list[j]</span><br><span class="line">            list[j] = list[j+<span class="number">1</span>]</span><br><span class="line">            list[j+<span class="number">1</span>] = temp</span><br><span class="line"><span class="keyword">print</span> list</span><br></pre></td></tr></table></figure><h2 id="列表去重"><a href="#列表去重" class="headerlink" title="列表去重"></a>列表去重</h2><p>下面是实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(list)<span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">if</span> list[i] <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">        res.append(list[i])</span><br><span class="line"><span class="keyword">print</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python小程序&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://wsluyu.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://wsluyu.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>编写一个UI自动化脚本</title>
    <link href="https://wsluyu.github.io/blog/2018/02/12/hexo/selenium+Python_1/"/>
    <id>https://wsluyu.github.io/blog/2018/02/12/hexo/selenium+Python_1/</id>
    <published>2018-02-12T16:00:00.000Z</published>
    <updated>2022-03-09T08:38:45.092Z</updated>
    
    <content type="html"><![CDATA[<p>selenium+Python自动化测试</p><a id="more"></a><h2 id="——第一个自动化脚本"><a href="#——第一个自动化脚本" class="headerlink" title="——第一个自动化脚本"></a>——第一个自动化脚本</h2><p>推荐使用编程工具PyCharm</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8  //把编码统一成utf-8格式。等号两边不要留空格，否则不起作用</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver //导入selenium的WebDriver包</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome() //把WebDriver的Chrome对象赋值给变量driver</span><br><span class="line">driver.get(<span class="string">"https://www.baidu.com/"</span>) //获得浏览器对象后通过get()方法，向浏览器发送网址</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_key(<span class="string">"selenium2"</span>) //定位元素，并向输入框输入selenium2</span><br><span class="line">driver.find_element_by_id(<span class="string">"su"</span>).click() //定位按钮，发送单击事件</span><br><span class="line">driver.quit() //退出并关闭浏览器</span><br></pre></td></tr></table></figure><h2 id="——安装浏览器驱动"><a href="#——安装浏览器驱动" class="headerlink" title="——安装浏览器驱动"></a>——安装浏览器驱动</h2><p>WebDriver支持 Firefox、IE、Opera和chrome等浏览器。它还支持Android和iPhone的移动应用测试。<br>各个浏览器驱动的下载地址：<a href="http://www.seleniumhq.org/download" target="_blank" rel="external">http://www.seleniumhq.org/download</a><br>安装chrome浏览器驱动，下载ChromeDriver_win32.zip(根据自己的系统下载)，解压得到chromedriver.exe文件，放到系统环境变量Path下面，之前已经将(C:\Python27)放到系统环境变量Path下面，所以将chromedriver.exe放到C:\Python27\ 目录下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;selenium+Python自动化测试&lt;/p&gt;
    
    </summary>
    
      <category term="测试" scheme="https://wsluyu.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="selenium,python" scheme="https://wsluyu.github.io/tags/selenium-python/"/>
    
  </entry>
  
  <entry>
    <title>selenium+Python环境搭建</title>
    <link href="https://wsluyu.github.io/blog/2018/02/10/hexo/selenium+Python_0/"/>
    <id>https://wsluyu.github.io/blog/2018/02/10/hexo/selenium+Python_0/</id>
    <published>2018-02-10T16:00:00.000Z</published>
    <updated>2022-03-09T08:38:45.092Z</updated>
    
    <content type="html"><![CDATA[<p>selenium+Python环境搭建</p><a id="more"></a><h2 id="——安装Python"><a href="#——安装Python" class="headerlink" title="——安装Python"></a>——安装Python</h2><p>访问Python官方网站：<a href="https://www.python.org" target="_blank" rel="external">https://www.python.org</a></p><p>找到下载页面，根据自己的平台选择相应的版本进行下载。Windows版本下载后会得到一个后缀名.msi的文件，双击安装。</p><p>安装过程与一般的Windows程序类似。安装完成后，会在开始菜单中看到安装好的Python目录。如图。<br><img src="/bimg/22.png" alt></p><p>打开Python自带的IDLE，就可以编写Python程序了。Python Shell界面如图。<br><img src="/bimg/23.png" alt></p><p>或者在Windows命令下输入“python”命令，也可以进入Python Shell模式。<br><img src="/bimg/24.png" alt></p><h2 id="——安装pip"><a href="#——安装pip" class="headerlink" title="——安装pip"></a>——安装pip</h2><p>pip是一个安装和管理Python包的工具，通过pip来安装Python包变的十分简单。<br>pip下载地址：<a href="https://pypi.python.org/pypi/pip" target="_blank" rel="external">https://pypi.python.org/pypi/pip</a><br>解压下载文件，通过Python命令执行setup.py进行安装。</p><p>在最新的Python安装包中已经集成了pip,可以在Python目录C:\Python27\Scripts下查看是否有pip.exe文件。</p><h2 id="——安装selenium"><a href="#——安装selenium" class="headerlink" title="——安装selenium"></a>——安装selenium</h2><p>cmd.exe:<br>    &gt;pip install selenium==2.48.0 //指定版本号安装</p><pre><code>&gt;pip uninstall selenium //卸载当前安装的包</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;selenium+Python环境搭建&lt;/p&gt;
    
    </summary>
    
      <category term="测试" scheme="https://wsluyu.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="selenium,python" scheme="https://wsluyu.github.io/tags/selenium-python/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter接口测试进阶</title>
    <link href="https://wsluyu.github.io/blog/2018/02/01/hexo/jmeter_1/"/>
    <id>https://wsluyu.github.io/blog/2018/02/01/hexo/jmeter_1/</id>
    <published>2018-02-01T16:00:00.000Z</published>
    <updated>2022-03-09T08:38:45.092Z</updated>
    
    <content type="html"><![CDATA[<p>Jmeter接口测试参数化、断言、关联等<br><a id="more"></a></p><h2 id="Jmeter添加cookie"><a href="#Jmeter添加cookie" class="headerlink" title="Jmeter添加cookie"></a>Jmeter添加cookie</h2><p>测试登录后才能访问的接口，需要添加cookie信息。在线程组里添加配置元件—HTTP Cookie 管理器</p><h2 id="Jmeter添加header"><a href="#Jmeter添加header" class="headerlink" title="Jmeter添加header"></a>Jmeter添加header</h2><p>需要在线程组里面添加配置元件—HTTP信息头管理器<br><img src="/bimg/30.png" alt></p><h2 id="Jmeter接口测试-断言"><a href="#Jmeter接口测试-断言" class="headerlink" title="Jmeter接口测试-断言"></a>Jmeter接口测试-断言</h2><p>jmeter断言用来检测响应返回的结果和我们预期的是否一致。若针对整个线程组的话，则在线程组下添加断言-响应断言；若只是针对某个请求的话，则在请求下添加断言-响应断言。<br>例：响应码200时，断言成功<br><img src="/bimg/34.png" alt></p><p>例：响应文本中包含以下信息，断言成功<br><img src="/bimg/35.png" alt></p><h2 id="Jmeter接口测试-参数化"><a href="#Jmeter接口测试-参数化" class="headerlink" title="Jmeter接口测试-参数化"></a>Jmeter接口测试-参数化</h2><p>入参经常变化的话，则可以设置成一个变量，方便统一修改管理；如果入参要求随机或可多种选择，则通过函数生成器或者读取文件形成一个变量。所以参数化有三种方式：用户定义的变量、函数生成器、读取文件。</p><h3 id="（1）用户定义的变量"><a href="#（1）用户定义的变量" class="headerlink" title="（1）用户定义的变量"></a>（1）用户定义的变量</h3><p>需要添加配置元件-用户定义的变量。<br><img src="/bimg/31.png" alt><br><img src="/bimg/32.png" alt></p><h3 id="（2）函数生成器"><a href="#（2）函数生成器" class="headerlink" title="（2）函数生成器"></a>（2）函数生成器</h3><p>  需要用到函数助手功能，可以调用函数生成一些有规则的数据。常用的几个函数有_uuid、_random、_time。_uuid会生成一个随机唯一的id，比如在避免java请求重发造成未处理数据太多的情况，接口请求可加一个唯一的请求id唯一的响应id进行一一对应；随机数_random，可以在你指定的一个范围里取随机值；取当前时间_time，一些时间类的入参可以使用,如{<strong>time(,)} 是生成精确到毫秒的时间戳、{</strong>time(/1000,)}是生成精确到秒的时间戳、${__time(yyyy-MM-dd HH:mm:ss,)} 是生成精确到秒的当前时间。</p><h3 id="（3）从文件读取"><a href="#（3）从文件读取" class="headerlink" title="（3）从文件读取"></a>（3）从文件读取</h3><p>  需要在线程组里面添加配置元件-CSV Data Set Config<br>  其中Recycle on EOF:设置True后，允许循环取值<br><img src="/bimg/33.png" alt></p><h2 id="Jmeter接口测试-关联"><a href="#Jmeter接口测试-关联" class="headerlink" title="Jmeter接口测试-关联"></a>Jmeter接口测试-关联</h2><p>接口请求之间存在参数调用，为了保存这个参数，建立jmeter关联。比如登陆接口和购买商品接口，购买商品接口就需要登陆接口返回的token等登陆信息，jmeter关联就可以保存这个token信息，方便购买商品接口使用。<br>  jmeter关联可以通过二种方式来完成，获取到返回结果中指定的值。它们分别是正则表达式提取器、 json path extractor。 </p><h3 id="（1）正则表达式提取器"><a href="#（1）正则表达式提取器" class="headerlink" title="（1）正则表达式提取器"></a>（1）正则表达式提取器</h3><p>若想获取的返回值未匹配到，可以把正则表达式两边匹配的数据扩大点。<br><img src="/bimg/36.png" alt></p><h3 id="（2）json-path-extractor"><a href="#（2）json-path-extractor" class="headerlink" title="（2）json path extractor"></a>（2）json path extractor</h3><p>jmeter通过json path extractor来处理json串，提取json串中的字段值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jmeter接口测试参数化、断言、关联等&lt;br&gt;
    
    </summary>
    
      <category term="测试" scheme="https://wsluyu.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Jmeter" scheme="https://wsluyu.github.io/tags/Jmeter/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter接口测试入门</title>
    <link href="https://wsluyu.github.io/blog/2018/01/25/hexo/jmeter_0/"/>
    <id>https://wsluyu.github.io/blog/2018/01/25/hexo/jmeter_0/</id>
    <published>2018-01-25T16:00:00.000Z</published>
    <updated>2022-03-09T08:38:45.092Z</updated>
    
    <content type="html"><![CDATA[<p>Jmeter介绍以及安装<br><a id="more"></a></p><h2 id="Jmeter简介"><a href="#Jmeter简介" class="headerlink" title="Jmeter简介"></a>Jmeter简介</h2><p>jmeter是apache公司基于java开发的一款开源压力测试工具，体积小，功能全，使用方便，是一个比较轻量级的测试工具，使用起来非常简单。因为jmeter是java开发的，所以运行的时候必须先要安装jdk才可以。jmeter是免安装的，拿到安装包之后直接解压就可以使用，同时它在linux/windows/macos上都可以使用。 </p><p>jmeter可以做接口测试和压力测试。其中接口测试的简单操作包括做http脚本（发get/post请求、加cookie、加header、加权限认证、上传文件）、做webservice脚本、参数化、断言、关联（正则表达式提取器和处理json-json path extractor）和jmeter操作数据库等等。</p><h2 id="Jmeter安装"><a href="#Jmeter安装" class="headerlink" title="Jmeter安装"></a>Jmeter安装</h2><p>官网：<a href="http://jmeter.apache.org/" target="_blank" rel="external">http://jmeter.apache.org/</a><br>下载：apache-jmeter-3.3.zip  （当前最新版本）<br>安装方法：解压缩即可<br>前提：JMeter是基于Java的桌面应用，需要安装JDK（1.6版本以上），并配置好JDK的环境变量JAVA_HOME<br>启动方式：在JMeter的bin目录下<br>    jmeter.bat （适用于Windows批处理文件）–双击即可启动JMeter<br>    jmeter.sh （适用于Linux的脚本文件）</p><h2 id="Jmeter接口测试"><a href="#Jmeter接口测试" class="headerlink" title="Jmeter接口测试"></a>Jmeter接口测试</h2><p>一般分五个步骤:</p><p>（1）添加线程组<br><img src="/bimg/17.png" alt><br>（2）添加http请求<br><img src="/bimg/18.png" alt><br>（3）在http请求中写入接入url、路径、请求方式和参数<br>    以百度的一个页面为例：<a href="https://p.baidu.com/daily/view?id=112389" target="_blank" rel="external">https://p.baidu.com/daily/view?id=112389</a><br>    <img src="/bimg/19.png" alt><br>（4）添加查看结果树<br>    <img src="/bimg/20.png" alt></p><p>（5）调用接口、查看返回值</p><p>接口请求后，可在“查看结果树”中查看接口返回状态和响应数据。<br><img src="/bimg/21.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jmeter介绍以及安装&lt;br&gt;
    
    </summary>
    
      <category term="测试" scheme="https://wsluyu.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Jmeter" scheme="https://wsluyu.github.io/tags/Jmeter/"/>
    
  </entry>
  
  <entry>
    <title>Postman介绍</title>
    <link href="https://wsluyu.github.io/blog/2017/12/10/hexo/postman_0/"/>
    <id>https://wsluyu.github.io/blog/2017/12/10/hexo/postman_0/</id>
    <published>2017-12-10T16:00:00.000Z</published>
    <updated>2022-03-09T08:38:45.092Z</updated>
    
    <content type="html"><![CDATA[<p>Postman介绍以及安装<br><a id="more"></a></p><h2 id="一、Postman介绍"><a href="#一、Postman介绍" class="headerlink" title="一、Postman介绍"></a>一、Postman介绍</h2><p>接口测试工具，模拟HTTP请求。<br>使用场景：<br>1、开发接口的时候需要快速的调用接口，以便测试<br>2、测试的时候需要非常方便的调用接口，通过不同的参数去测试接口的输出<br>3、这些接口调用是需要保存下来反复运行的<br>4、在运行过程中加断言</p><h2 id="二、Postman安装"><a href="#二、Postman安装" class="headerlink" title="二、Postman安装"></a>二、Postman安装</h2><p>官网下载：<a href="https://www.getpostman.com/" target="_blank" rel="external">https://www.getpostman.com/</a><br><img src="/bimg/9.png" alt></p><h2 id="三、Chrome版本和native版本"><a href="#三、Chrome版本和native版本" class="headerlink" title="三、Chrome版本和native版本"></a>三、Chrome版本和native版本</h2><p>chrome插件版本不再维护，现在使用native版本</p><h2 id="四、Postman更新"><a href="#四、Postman更新" class="headerlink" title="四、Postman更新"></a>四、Postman更新</h2><p>默认自动更新;<br>可手动设置：setting–update<br>All：静默更新<br>Minor fixes：大版本提醒更新（推荐）<br>None：不更新<br><img src="/bimg/10.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Postman介绍以及安装&lt;br&gt;
    
    </summary>
    
      <category term="测试" scheme="https://wsluyu.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Postman" scheme="https://wsluyu.github.io/tags/Postman/"/>
    
  </entry>
  
  <entry>
    <title>Postman进阶篇</title>
    <link href="https://wsluyu.github.io/blog/2017/12/10/hexo/postman_2/"/>
    <id>https://wsluyu.github.io/blog/2017/12/10/hexo/postman_2/</id>
    <published>2017-12-10T16:00:00.000Z</published>
    <updated>2022-03-09T08:38:45.092Z</updated>
    
    <content type="html"><![CDATA[<p>Postman设置变量</p><a id="more"></a><h2 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h2><p><strong>设置全局变量和环境变量</strong><br>例如：我们的项目有3个环境分别是测试环境、预发布、和线上，它们的domain都是 XXX.chime.me.<br>测试环境：test.chime.me<br>预发布：prerelease.chime.me<br>线上：chime.me<br>为了不用每个环境都去写一遍接口，我们可以把XXX设置成为环境变量，测试不同的环境，只需要切换环境变量即可。</p><p><strong> 如何在postman中设置环境变量：</strong><br>1、把HTTP中XXX.设置为变量“domain_name”，即</p><pre><code>http://{{domain_name}}chime.me/</code></pre><p>2、点击右上的小眼睛，添加3环境个变量<br><img src="/bimg/11.jpg" alt><br><img src="/bimg/12.jpg" alt></p><p>3、选择对应的环境，变量填充成对应的值：<br><img src="/bimg/13.jpg" alt></p><h2 id="二、运行collection"><a href="#二、运行collection" class="headerlink" title="二、运行collection"></a>二、运行collection</h2><p><img src="/bimg/14.jpg" alt></p><h2 id="三、从命令行运行postman脚本"><a href="#三、从命令行运行postman脚本" class="headerlink" title="三、从命令行运行postman脚本"></a>三、从命令行运行postman脚本</h2><p>运行准备：<br>导出collection<br>安装nodejs和npm<br>安装newman</p><h3 id="1、导出collection"><a href="#1、导出collection" class="headerlink" title="1、导出collection:"></a>1、导出collection:</h3><p><img src="/bimg/15.jpg" alt><br>点击Export即可导出一个JSON格式的文件。</p><h3 id="2、安装nodejs和npm"><a href="#2、安装nodejs和npm" class="headerlink" title="2、安装nodejs和npm"></a>2、安装nodejs和npm</h3><p>下载安装nodejs<br><a href="http://nodejs.cn/download/" target="_blank" rel="external">http://nodejs.cn/download/</a></p><h3 id="3、安装newman"><a href="#3、安装newman" class="headerlink" title="3、安装newman"></a>3、安装newman</h3><p>运行命令行 ：</p><pre><code>$ npm install newman --global;</code></pre><p><img src="/bimg/16.png" alt></p><h3 id="运行postman脚本"><a href="#运行postman脚本" class="headerlink" title="运行postman脚本"></a>运行postman脚本</h3><p>安装成功后使用newman运行导出的JSON文件</p><pre><code>$ newman run XXX.json -d data.json -r 生成的报告格式</code></pre><p>-d ：添加测试数据变量<br>-r ：生成报告的格式，可生成多种格式的报告</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Postman设置变量&lt;/p&gt;
    
    </summary>
    
      <category term="测试" scheme="https://wsluyu.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Postman" scheme="https://wsluyu.github.io/tags/Postman/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins环境搭建</title>
    <link href="https://wsluyu.github.io/blog/2017/11/26/hexo/Jenkins/"/>
    <id>https://wsluyu.github.io/blog/2017/11/26/hexo/Jenkins/</id>
    <published>2017-11-26T16:00:00.000Z</published>
    <updated>2022-03-09T08:38:45.092Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins环境搭建</p><a id="more"></a><h2 id="一、-java开发环境配置"><a href="#一、-java开发环境配置" class="headerlink" title="一、 java开发环境配置"></a>一、 java开发环境配置</h2><h3 id="1-安装jdk（java开发工具包）"><a href="#1-安装jdk（java开发工具包）" class="headerlink" title="1.安装jdk（java开发工具包）"></a>1.安装jdk（java开发工具包）</h3><p>双击jdk-7u13-windows-i586.exe，一路next。<br>安装路径不一定在默认路径，但要记住此安装路径</p><h3 id="2-设置java环境变量"><a href="#2-设置java环境变量" class="headerlink" title="2.设置java环境变量"></a>2.设置java环境变量</h3><p>1)桌面[计算机]图标，右键选择属性-&gt;高级系统设置-&gt;环境变量<br>2) 选择系统变量-&gt;新建也可以新建成用户变量但是其他用户无法使用<br>变量名：JAVA_HOME<br>变量值：C:\Program Files (x86)\Java\jdk1.7.0_13这里是你上一步安装java的路径</p><p><img src="/bimg/1.png" alt></p><p>3) 上步结束之后，选中环境变量中的“path”</p><p><img src="/bimg/2.png" alt></p><p>选中之后编辑：<img src="/bimg/3.png" alt></p><p>“变量值”一栏的最后面添加如下的</p><p>;%Java_Home%\bin;%Java_Home%\jre\bin;</p><p>一个字不要差，注意前后都要有英文分号</p><p>4)上一步确定之后，再“新建”</p><p><img src="/bimg/4.png" alt></p><p>变量名：CLASSPATH</p><p>变量值：.;%Java_Home%\bin;%Java_Home%\lib\dt.jar;%Java_Home%\lib\tools.jar</p><p>上面的变量值最好也是一个字符不变的贴上去，“变量值”最前面的 .; 不要漏掉</p><p>5)检查环境变量搭好了：调出“cmd”检查</p><p>输入java –version（提供给你们的版本应该是1.7.0.13）</p><p><img src="/bimg/5.png" alt></p><p>输入java</p><p><img src="/bimg/6.png" alt></p><p>输入javac</p><p><img src="/bimg/6.png" alt></p><p>三张图都看到了，就说明java环境配置成功。</p><h2 id="二、-tomcat安装与配置"><a href="#二、-tomcat安装与配置" class="headerlink" title="二、 tomcat安装与配置"></a>二、 tomcat安装与配置</h2><p>1.解压apache-tomcat-7.0.68-windows-x64.zip</p><ol start="2"><li>配置环境变量：</li></ol><p>变量名：CATALINA_HOME</p><p>变量值：刚刚安装的路径</p><ol start="3"><li><p>bin 文件夹，找到里面的startup.bat，运行，最小化该窗口</p></li><li><p>打开浏览器，输入http：//localhost:8080.如果出现下面的内容说明成功了<br><img src="/bimg/7.png" alt></p></li></ol><h2 id="三、Jenkins安装"><a href="#三、Jenkins安装" class="headerlink" title="三、Jenkins安装"></a>三、Jenkins安装</h2><p>在最简单的情况下，Jenkins 只需要两个步骤：</p><p>1.下载一个WAR文件</p><p>2.运行 <a href="http://lib.csdn.net/base/17" target="_blank" rel="external"><strong>Java</strong></a> -jar jenkins.war</p><p> <img src="/bimg/8.png" alt></p><p>还有一种安装方式就是将下载的war包文件部署到 servlet 容器tomcat/webapps目录下，在浏览器的URL地址栏中输入类似<a href="http://localhost:8080/jenkins/这样的地址即可。下图是安装成功后的界面" target="_blank" rel="external">http://localhost:8080/jenkins/这样的地址即可。下图是安装成功后的界面</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins环境搭建&lt;/p&gt;
    
    </summary>
    
      <category term="测试" scheme="https://wsluyu.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Jenkins" scheme="https://wsluyu.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Charles设置手机端代理</title>
    <link href="https://wsluyu.github.io/blog/2017/05/24/hexo/Charles/"/>
    <id>https://wsluyu.github.io/blog/2017/05/24/hexo/Charles/</id>
    <published>2017-05-24T16:00:00.000Z</published>
    <updated>2022-03-09T08:38:45.092Z</updated>
    
    <content type="html"><![CDATA[<p>Charles设置手机端代理</p><a id="more"></a><p>目的：想在手机上访问代理地址<br>一、    在电脑上设置hosts代理地址如：52.9.163.97  luyu.chime.me<br>二、    打开Charles<br>三、    在 iPhone 的 “ 设置 “-&gt;” 无线局域网 “ 中，可以看到当前连接的 wifi 名，通过点击右边的详情键，可以看到当前连接上的 wifi 的详细信息，包括 IP 地址，子网掩码等信息。在其最底部有「HTTP 代理」一项，我们将其切换成手动，然后填上 Charles 运行所在的电脑的 IP，以及端口号 8888<br><img src="/bimg/phone.png" alt><br>四、    手机保存设置后，Charles弹出授权弹窗，点击allow<br><img src="/bimg/allow1.png" alt><br>五、    手机上访问网站，即可在Charles中看到请求<br><img src="/bimg/allow2.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Charles设置手机端代理&lt;/p&gt;
    
    </summary>
    
      <category term="测试" scheme="https://wsluyu.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Charles" scheme="https://wsluyu.github.io/tags/Charles/"/>
    
  </entry>
  
  <entry>
    <title>常用markdown语法</title>
    <link href="https://wsluyu.github.io/blog/2017/05/23/hexo/markdown/"/>
    <id>https://wsluyu.github.io/blog/2017/05/23/hexo/markdown/</id>
    <published>2017-05-23T16:00:00.000Z</published>
    <updated>2022-03-09T08:38:45.092Z</updated>
    
    <content type="html"><![CDATA[<p>常用markdown语法</p><a id="more"></a><h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><h4 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h4><h5 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h5><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><p>这是一个普通段落。</p><p>这是另一个普通段落。</p><p><strong>粗体</strong>，<em>倾斜</em></p><p>下面是一段代码，<code>strong</code></p><pre><code>&lt;table&gt;    &lt;tr&gt;        &lt;td&gt;Foo&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;</code></pre><p>下面是另一种格式的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>无序列表</p><ul><li>列表项</li><li>列表项</li><li>列表项</li></ul><p>有序列表</p><ol><li>列表项</li><li>列表项</li><li>列表项</li></ol><blockquote><p>块级引用，块级引用，块级引用，块级引用</p></blockquote><p><a href="http://yanhaijing.com" title="超链接" target="_blank" rel="external">超链接</a></p><p><a href="http://yanhaijing.com/" title="颜海镜" target="_blank" rel="external">超链接2</a></p><p>分割线</p><hr><p>下面是一张图片</p><p><img src="/img/facebook.png" alt="图片描述"></p><p>脚注<a href="脚注6">^6</a>脚注脚注</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用markdown语法&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://wsluyu.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://wsluyu.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wsluyu.github.io/blog/2016/07/27/hexo/hello-world/"/>
    <id>https://wsluyu.github.io/blog/2016/07/27/hexo/hello-world/</id>
    <published>2016-07-27T16:00:00.000Z</published>
    <updated>2022-03-09T08:38:45.092Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://wsluyu.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://wsluyu.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
